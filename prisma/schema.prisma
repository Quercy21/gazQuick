generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Utilisateur {
  id            Int         @id @default(autoincrement())
  prenom        String
  nom           String
  sexe          String
  nomUtilisateur String    @unique
  motDePasse    String
  etablissements Etablissement[]
  groupes        Groupe[]
  bouteilles     BouteilleGaz[]
}

model Etablissement {
  id           Int          @id @default(autoincrement())
  name         String
  dateEnreg    DateTime
  proprietaire Int
  owner        Utilisateur  @relation(fields: [proprietaire], references: [id])
  employes     Employe[]
}

model Groupe {
  id           Int          @id @default(autoincrement())
  intitule     String
  niveauAccess Int
  utilisateurs Utilisateur[]
}

model Employe {
  id               Int          @id @default(autoincrement())
  role             RoleEmploye
  dateEnreg        DateTime
  dateLicenciement DateTime?
  etablissementId  Int
  etablissement    Etablissement @relation(fields: [etablissementId], references: [id])
  commandes        Commande[]
}

model Commande {
  id              Int           @id @default(autoincrement())
  dateEnreg       DateTime
  valide          Boolean
  valideParId     Int?
  validePar       Employe?      @relation(fields: [valideParId], references: [id])
  annuleLe        DateTime?
  annuleParClient Boolean
  localisation    String
  qte             Int
  dateValidation  DateTime?
  bouteilles      BouteilleGaz[]
  livraisons      Livraison[]
}

model Livraison {
  id            Int           @id @default(autoincrement())
  commandeId    Int
  commande      Commande      @relation(fields: [commandeId], references: [id])
  statut        StatutLivraison
  livreLe       DateTime
  localisation  String
  effectueParId Int
 // effectuePar   Employe       @relation(fields: [effectueParId], references: [id])
}

model BouteilleGaz {
  id           Int          @id @default(autoincrement())
  reference    String
  poids        Float
  marque       String
  couleur      String
  qte          Int
  dateAjout    DateTime
  ajouteParId  Int
  image        String          
  //ajoutePar    Utilisateur  @relation(fields: [ajouteParId], references: [id])
  publieParId  Int
  publiePar    Utilisateur  @relation(fields: [publieParId], references: [id])
  commandes    Commande[]
}

enum RoleEmploye {
  vendeur
  livreur
}

enum StatutLivraison {
  nouvelle
  assignee
  enCours
  achevee
  annulee
}


